// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
//  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User of the system
model User {
  id              String   @id @default(uuid())
  first_name      String
  last_name       String
  email           String   @unique
  password        String
  roleId          String
  corporate_id    String?
  user_type       String?
  profile_picture String?
  is_delete       Boolean  @default(false)
  is_active       Boolean  @default(true)
  created_by_user String?
  updated_by_user String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  role      Role     @relation(fields: [roleId], references: [id])
  sentMails SentMail[]

  // self-relations
  createdBy   User?   @relation("UserCreatedBy", fields: [created_by_user], references: [id])
  updatedBy   User?   @relation("UserUpdatedBy", fields: [updated_by_user], references: [id])
  createdUsers User[] @relation("UserCreatedBy")
  updatedUsers User[] @relation("UserUpdatedBy")

  // NEW: opposite sides for Customer and Prospect
  createdCustomers Customer[] @relation("CustomerCreatedBy")
  updatedCustomers Customer[] @relation("CustomerUpdatedBy")

  createdProspects Prospect[] @relation("ProspectCreatedBy")
  updatedProspects Prospect[] @relation("ProspectUpdatedBy")
}

/// Role (admin, clinician, etc.)
model Role {
  id          String        @id @default(uuid())
  role_name   String        @unique
  is_delete   Boolean       @default(false)
  is_active   Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  users       User[]
  permissions RolePermission[]
}

/// Permission (manage_users, send_email, etc.)
model Permission {
  id          String        @id @default(uuid())
  page_name   String        @unique
  page_url    String
  icon        String?
  sequence    Int?
  sub_sequence Int?
  user_type   String?
  is_delete   Boolean       @default(false)
  is_active   Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  roles RolePermission[]
}

/// Pivot: Role â†” Permission (many-to-many)
model RolePermission {
  id           String      @id @default(uuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

// Customer
model Customer {
  id              String   @id @default(uuid())
  first_name      String
  last_name       String
  email           String
  subscription    String?
  experience      String?
  traded          String?
  acknowledgement String?
  created_by_user String?
  updated_by_user String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdBy User? @relation("CustomerCreatedBy", fields: [created_by_user], references: [id])
  updatedBy User? @relation("CustomerUpdatedBy", fields: [updated_by_user], references: [id])
}

/// Sent Mail log
model SentMail {
  id        String   @id @default(uuid())
  to        String
  subject   String
  body      String
  status    String   // e.g., "SENT", "FAILED", "QUEUED"
  sentAt    DateTime @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id])
}

/// Prospect
model Prospect {
  id              String   @id @default(uuid())
  first_name      String
  last_name       String
  email           String   @unique
  is_delete       Boolean  @default(false)
  is_active       Boolean  @default(true)
  created_by_user String?
  updated_by_user String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdBy User? @relation("ProspectCreatedBy", fields: [created_by_user], references: [id])
  updatedBy User? @relation("ProspectUpdatedBy", fields: [updated_by_user], references: [id])
}
